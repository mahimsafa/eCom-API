# org: mahimsafa
app: ecommerce-dynamodb
service: ecommerce-dynamodb
frameworkVersion: '3'
configValidationMode: error
useDotenv: true



custom:
  table1: 'orders'
  table2: 'products'
  bucket: 'sp-ecommerce-fullstack'
  aws-access-id: 'AKIAWYY2JS45T3Y3QQT7'
  aws-secret-access-key: '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'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  memorySize: 512
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - s3:PutObject
            - s3:GetObject
          Resource:
            - Fn::GetAtt: [ OrdersTable, Arn ]
            - Fn::GetAtt: [ ProductsTable, Arn ]
            - Fn::GetAtt: [ StorageBucket, Arn ]
  environment:
    ORDERS_TABLE: ${self:custom.table1}
    PRODUCTS_TABLE: ${self:custom.table2}
    S3_BUCKET: ${self:custom.bucket}
    S3_ACCESS_ID: ${self:custom.aws-access-id}
    S3_SECRET_ACCESS_KEY: ${self:custom.aws-secret-access-key}

functions:
  api:
    handler: server.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.table1}
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.table2}

    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.bucket}'
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, HEAD]
              AllowedOrigins: ['*']
    StorageBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource: arn:aws:s3:::${self:custom.bucket}/*
        Bucket:
          Ref: StorageBucket
